'use strict';

/**
 * Enable managing file attributes
 * with a convenient JS api
 */

var attrs = require('bindings')('glib').attributes;

/**
 * Add an emblem to the file, if it doesn't already
 * hold it
 * 
 * @param {string} file Path to the file
 * @param {string} emblem Emblem name
 * @return {null}
 */
attrs.addEmblem = function (file, emblem) {
    var emblems = attrs.getEmblems(file);
    
    if (emblems.indexOf(emblem) === -1) {
        emblems.push(emblem);
        attrs.setAttribute(file, 'metadata::emblems', emblems);
    }
};

/**
 * Remove an emblem from a file, if it holds it
 * 
 * @param {string} file Path to the file
 * @param {string} emblem Emblem name
 * @return {null}
 */
attrs.removeEmblem = function (file, emblem) {
    var emblems = attrs.getEmblems(file),
        position = emblems.indexOf(emblem);
    
    if (position > -1) {
        emblems.splice(position, 1);
        attrs.setAttribute(file, 'metadata::emblems', emblems);
    }
};

/**
 * Check whether a file has an emblem
 * 
 * @param {string} file Path to the file
 * @param {string} emblem Emblem name
 * @return {bool} Whether the file has this emblem
 */
attrs.hasEmblem = function (file, emblem) {
    var emblems = attrs.getEmblems(file);
    
    return (emblems > -1);
};

/**
 * Set a file's emblems list
 * 
 * @param {string} file Path to the file
 * @param {Array<string>} emblems List of emblems to set
 * @return {null}
 */
attrs.setEmblems = function (file, emblems) {
    attrs.setAttribute(
        file, 'metadata::emblems', [].slice.call(emblems)
    );
};

/**
 * Get a list of emblems from a file
 * 
 * @param {string} file Path to the file
 * @return {Array<string>} List of held emblems
 */
attrs.getEmblems = function (file) {
    return [].slice.call(
        attrs.getAttribute(file, 'metadata::emblems')
    );
};

module.exports = attrs;
